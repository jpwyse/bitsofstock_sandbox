"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-l&zg1$%xsbm)#@2x=6#gy^&%j4$^$vu)c)xk!=t^!fdj2yt)yh')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'daphne',  # Must be first for Channels
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise',
    'corsheaders',
    'django_extensions',
    'trading',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization & Timezone Configuration
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Timezone Configuration
# TIME_ZONE: Server timezone for date/time display and naive datetime interpretation
# - Set to 'UTC' (Coordinated Universal Time) for consistent server-side timestamps
# - All database timestamps stored in UTC for portability and consistency
# - External APIs (CoinGecko, Finnhub, yfinance) use various timezone formats
TIME_ZONE = 'UTC'

USE_I18N = True

# Timezone-Aware Datetime Handling
# USE_TZ: Enables timezone-aware datetime objects throughout Django
# - When True (REQUIRED for this project):
#   • All datetime objects are timezone-aware (have tzinfo)
#   • Database stores datetimes in UTC
#   • Django automatically converts between timezones
#   • timezone.now() returns aware datetime in UTC
#   • Model DateTimeField with auto_now_add/auto_now creates aware datetimes
# - Impact on project:
#   • Transaction timestamps: timezone-aware (trading/models.py:Transaction.timestamp)
#   • Portfolio creation: timezone-aware (trading/models.py:Portfolio.created_at)
#   • Price updates: timezone-aware (trading/models.py:Cryptocurrency.last_updated)
#   • API responses: Serialized as ISO 8601 with timezone offset (e.g., "2025-01-15T14:30:00Z")
#   • Historical data: CoinGecko returns UTC timestamps, converted to aware via django.utils.timezone
# - External API timezone handling:
#   • CoinGecko: Returns UNIX timestamps (ms), converted to UTC aware datetimes
#   • Finnhub: Returns UNIX timestamps (seconds), serialized as integers in API responses
#   • yfinance: Returns timezone-aware timestamps, converted to tz-naive strings for frontend
# - Frontend consumption:
#   • ISO 8601 strings with timezone (e.g., "2025-01-15T14:30:00+00:00" or "Z" suffix)
#   • JavaScript Date() constructor automatically parses timezone offsets
# - IMPORTANT: Never use datetime.datetime.now() - always use django.utils.timezone.now()
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True


# Channels Configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}


# CoinGecko API Configuration
COINGECKO_API_URL = 'https://api.coingecko.com/api/v3'
COINGECKO_API_KEY = os.environ.get('COINGECKO_API_KEY', '')

# Finnhub API Configuration
FINNHUB_API_KEY = os.environ.get('FINNHUB_API_KEY', '')


# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'trading': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}
