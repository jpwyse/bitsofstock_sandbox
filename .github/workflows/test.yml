name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests (Python 3.11)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.0'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests with coverage
        run: |
          pytest \
            --cov=trading \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=80 \
            --tb=short

      - name: Upload coverage to Codecov (optional)
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests (Node 20 LTS)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Check coverage threshold (65%)
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 65" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 65% threshold"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets 65% threshold"

      - name: Upload coverage to Codecov (optional)
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: e2e/package-lock.json

      - name: Set up Python 3.11 (for Django backend)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.0'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Install E2E dependencies
        working-directory: e2e
        run: npm ci

      - name: Install Playwright browsers
        working-directory: e2e
        run: npx playwright install chromium --with-deps

      - name: Run E2E tests
        working-directory: e2e
        run: npm test

      - name: Upload Playwright report on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 7

      - name: Upload Playwright traces on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-traces
          path: e2e/test-results/
          retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "🧪 Test Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          if [ "${{ needs.backend-tests.result }}" == "success" ]; then
            echo "✅ Backend Tests: PASSED"
          else
            echo "❌ Backend Tests: FAILED"
          fi

          if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
            echo "✅ Frontend Tests: PASSED"
          else
            echo "❌ Frontend Tests: FAILED"
          fi

          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E Tests: PASSED"
          else
            echo "❌ E2E Tests: FAILED"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Fail if any test suite failed
          if [ "${{ needs.backend-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ]; then
            echo "❌ Some tests failed. Please review the logs above."
            exit 1
          fi

          echo "✅ All tests passed successfully!"
